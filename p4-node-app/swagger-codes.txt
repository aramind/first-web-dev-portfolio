openapi: 3.0.3
info:
  title: MONitime-api
  description: |-
    API used by monitime.
  version: 1.0.0
 
servers:
  - url: https://monitime-api.onrender.com/
tags:
  - name: /
    description: for general requests
  - name: record
    description: for requests involving CRUD operations on daily records
  - name: summary
    description: for requesting computations needed for summary page
  - name: quote
    description: for getting a random quote to be displayed

paths:
  /register:
    post:
      tags:
        - /
      description: Create an account for a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                name: "Juan Dela Cruz",
                username: "jdlc",
                email: "jd@email.com",
                password: "abc123",
                isActive: true
              }
                  
      responses:
        '201':
          description: Successfully registered
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Successfully registered",
                  result: {
                    id: "123i128397jkshdfjsdf8",
                    name: "Juan Dela Cruz",
                    username: "jdlc",
                    email: "jd@email.com",
                    photoURL: "",
                    token: "128371823718231kjhjshdf0234294238947238947",
                    isActive: true
                  }
                }
          
        '400':
          description: Failed registration
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: false,
                  message: "<Error message depending on the case of error>",
                  result: null
                }
    
  /login:
    post:
      tags:
        - /
      description: Sends a login attemp to use the app
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                email: "jd@email.com",
                password: "abc123",
              }
      responses:
        '200':
          description: Successful login
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Welcome back <username>",
                  result: {
                    id: "123i128397jkshdfjsdf8",
                    name: "Juan Dela Cruz",
                    username: "jdlc",
                    email: "jd@email.com",
                    photoURL: "",
                    token: "128371823718231kjhjshdf0234294238947238947",
                    isActive: true
                  }
                }
        '400':
          description: Failed login due to invalid credentials
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: false,
                  message: "Invalid credentials",
                  result: null
                }
        '404':
          description: Failed login because user does not exist
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: false,
                  message: "User does not exist",
                  result: null
                }
  
  /update-profile:
    patch:
      tags:
        - /
      description: Update user profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                name: "Juan Dela Cruz",
                username: "jdlc",
                photoURL: "https://NEWphotoURL.com",
              }
      responses:
        '200':
          description: Successful updating of profile
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Profile successfuly updated",
                  result: {
                    name: "name", 
                    username: "username", 
                    photoURL: "photoURL",
                    token: "token"
                  }
                }
  
  /deactivate:
    delete:
      tags:
        - /
      description: Deactivate an account
      responses:
        '200':
          description: Account successfuly deactivated
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Account successfuly deactivated",
                  result: {
                    name: "name", 
                    username: "username", 
                    photoURL: "photoURL",
                    token: "token",
                    isActive: false
                  }
                }
                
  /reactivate:
    patch:
      tags:
        - /
      description: Reactivate an account
      responses:
        '200':
          description: Successful reactivation of account
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Account successfuly reactivated. Welcome back <username>",
                  result: {
                    name: "name", 
                    username: "username", 
                    photoURL: "photoURL",
                    token: "token",
                    isActive: true
                  }
                }
                
  /record/{label}:
    post:
      tags:
        - record
      description: creates or updates a record for a given date specified on the label
      parameters:
        - in: path
          name: label
          required: true
          schema:
            type: string
            example: "2023-04-25"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                name: "work",
                seconds_spent: "3600",
              }
      responses:
        '200':
          description: successful update of record
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Record updated",
                  result: {
                    updatedrecord: "<updatedrecord>"
                  }
                }
        '201':
          description: new record created
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "New record saved",
                  result: {
                    savedrecord: "<savedrecord>"
                  }
                }
        '400':
          description: failed operation for record on selected date
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: false,
                  message: "<error message depending on the reason>",
                  result: null
                }
    
    get:
      tags:
        - record
      description: retrieves the record for a specified date 
      parameters:
        - in: path
          name: label
          required: true
          schema:
            type: string
            example: "2023-04-25"
      responses:
        '200':
          description: successful retrieving of record
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Record retrieved",
                  result: {
                    record: "<record object>"
                  }
                }
        '404':
          description: failed retrieval because record does not exist
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: false,
                  message: "No record created for the selected date",
                  result: null
                }
    
    put:
      tags:
        - record
      description: resets the entries in record for a certain date specified in the label
      parameters:
        - in: path
          name: label
          required: true
          schema:
            type: string
            example: "2023-04-25"
      responses:
        '200':
          description: successful resetting of record
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Reset successful",
                  result: {"<updatedrecord object>"}
                }
        '404':
          description: failed resetting of record
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: false,
                  message: "Reset cannot be done on non-existing data",
                  result: null
                }   
                
    delete:
      tags:
        - record
      description: deletes a record for a specified date as specified on the label
      parameters:
        - in: path
          name: label
          required: true
          schema:
            type: string
            example: "2023-04-25"
      responses:
        '200':
          description: successful deleting of record
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Record deleted",
                  result: {
                    deletedobject: "<deleted object>"
                  }
                }
                
  /summary/interval:
    get:
      tags:
        - summary
      description: Retrieves summary records within a specified interval
      parameters:
        - in: query
          name: ref
          description: The reference date for the interval
          required: true
          schema:
            type: string
            format: date
            example: "2023-04-27"
        - in: query
          name: interval
          description: The interval in days
          required: true
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: successful update of record
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "Successfully computed",
                  result: {
                      startDate: date,
                      endDate: date,
                      totalSeconds: seconds,
                      totalSecondsPerActivity: seconds,
                      activityAverages: ave,
                      activityPercentages: percent,
                      previousStartDate: date,
                      previousEndDate: date,
                      prevTotalSeconds: seconds,
                      totalSecondsPerActivityPrev: seconds,
                      prevActivityAverages: ave,
                      prevActivityPercentages: percent,
                  }
                }
  
  /quote:
    get:
      tags:
        - quote
      description: Retrieves a random quote to be displayed
      responses:
        '200':
          description: successful retrieval of a quote
          content: 
            application/json:
              schema:
                type: object
                example: {
                  success: true,
                  message: "A quote successfully retrieved",
                  result: {
                    category: "productivity",
                    content: "time is gold",
                    author: "confucios"
                  }
                }